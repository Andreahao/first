1.npm
	在node.js上开发，会用到很多别人的代码。
	如果要是用别人写的某个包，没辞根据名称搜索官网，下载代码，解压，再使用，很繁琐。
	于是，一个集中管理的工具应用而生：大家把自己开发的模块打包放在npm官网，如果使用，直接通过npm安装就可以用。
	
2. node程序
	a. 之前的javascript代码是在浏览器中运行的，因此，可以直接在浏览器中敲代码，然后直接运行。现在编写的javascript不能再浏览器中执行了，而是在node环境中执行。
	b. 编写：绝对不能用word和写字板。（保存的不是纯文本文件，如果用记事本编写javascript，以utf-8格式保存文件时，会自作聪明的在文件开始加上几个特殊字符utf-8 BOM，结果会导致程序运行出现莫名其妙的错误。应使用ANSI编码，并且暂时不要输入中文。）
			 建议使用Notepad++,UTF-8格式保存.
			 程序第一行： 'use strict' (一严格模式运行javascript代码，避免各种潜在陷阱)
	c. 选择一个目录保存，并命名文件名（文件名以.js结尾）
	d. 运行：打开命令行窗口——>切换到文件所在目录——>输入运行程序命令node 文件名
	
3. 	编写程序：如果执行javascript时使用严格模式，在js文件开头写'use strict'.但是，在服务器环境下，每个文件都写'use strict'很烦。
			  我们可以给nodejs传递一个参数，Node直接为所有的js文件开启严格模式。
			  （node --use_strict caIc.js）

4. 运行在：命令行模式 / Node交互模式
	命令行模式：类似C：\是windows提供的命令行模式；
	
	Node交互模式：(相当于启动了node解释器)
				  在命令行模式下，执行node进入Node交互模式。看到>，既是在node交互模式；
				  Node交互模式下，可以直接输入javascript代码并立即执行。
				  
	区别：Node交互模式下，会把每一行的javascript代码的结果自动打印，但直接yunxing.js文件不会。
		例如：Node交互模式下，100+200+300，输出，600
				但运行（100+200+300）calc.js文件，不会输入任何内容。要想输出结果，必须console.log（）
				
		
